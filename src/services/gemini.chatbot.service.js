"use strict";
require("dotenv").config();
const { GoogleGenAI } = require("@google/genai");
const ai = new GoogleGenAI({ apiKey: process.env.AI_GEMINI_API_KEY });
const ProductService = require("./product.service");
const Utils = require("../utils");

/**
 üßë Ng∆∞·ªùi d√πng h·ªèi ‚Üí üîÅ G·ª≠i v·ªÅ API Node.js
  ‚Üí Truy v·∫•n database (l·ªçc theo t·ª´ kh√≥a ho·∫∑c category, price)
  ‚Üí Ch·ªçn ra 5‚Äì10 s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t
  ‚Üí T·∫°o prompt: ‚ÄúCh·ªâ d√πng th√¥ng tin d∆∞·ªõi ƒë√¢y ƒë·ªÉ t∆∞ v·∫•n...‚Äù
  ‚Üí G·ª≠i prompt cho Gemini API
  ‚Üí Tr·∫£ l·∫°i ph·∫£n h·ªìi cho ng∆∞·ªùi d√πng 
 */
class GeminiChatbotService {
  static async call(contents) {
    const response = await ai.models.generateContent({
      model: "gemini-2.0-flash",
      contents: contents,
    });
    console.log(response.text);
  }

  static async extractKeywordsFromMessage(userMessage) {
    const prompt = `
      B·∫°n l√† tr·ª£ l√Ω AI. H√£y ph√¢n t√≠ch c√¢u sau v√† tr√≠ch xu·∫•t c√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn t∆∞ v·∫•n s·∫£n ph·∫©m.
      Tr·∫£ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON c√≥ c·∫•u tr√∫c sau:
      {
        "features": [c√°c ƒë·∫∑c ƒëi·ªÉm ng∆∞·ªùi d√πng y√™u c·∫ßu (lo·∫°i s·∫£n ph·∫©m, size)],
        "max_price": (gi√° t·ªëi ƒëa, n·∫øu c√≥, ƒë∆°n v·ªã VND),
        "min_price": (gi√° t·ªëi thi·ªÉu, n·∫øu c√≥, ƒë∆°n v·ªã VND)
      }
      C√¢u h·ªèi: "${userMessage}"
    `;

    const response = await ai.models.generateContent({
      model: "gemini-2.0-flash",
      contents: prompt,
    });
    const text = response.text;

    try {
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0]);
      } else {
        throw new Error("Kh√¥ng t√¨m th·∫•y JSON trong ph·∫£n h·ªìi.");
      }
    } catch (err) {
      console.error("L·ªói khi ph√¢n t√≠ch ph·∫£n h·ªìi Gemini:", err);
      console.log("Ph·∫£n h·ªìi th√¥:", text);
      return null;
    }
  }

  static async buildAdviceReply(products, userMessage) {
  const productList = products.map((p, idx) =>
    `${idx + 1}. ${p.name} - Gi√°: ${p.price}VND - ·∫¢nh: ${p.image} - ${p.sizes ? ` - Size: ${p.sizes.join(', ')}` : ''}`
  ).join('\n');

  const prompt = `
    B·∫°n l√† tr·ª£ l√Ω b√°n h√†ng. D∆∞·ªõi ƒë√¢y l√† danh s√°ch s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa kh√°ch:
    ${productList}

    Y√™u c·∫ßu c·ªßa kh√°ch: "${userMessage}"

    H√£y t∆∞ v·∫•n ng·∫Øn g·ªçn, th√¢n thi·ªán, g·ª£i √Ω 2-3 s·∫£n ph·∫©m n·ªïi b·∫≠t nh·∫•t, gi·∫£i th√≠ch v√¨ sao ph√π h·ª£p, v√† khuy·∫øn kh√≠ch kh√°ch ch·ªçn mua.`;

  const response = await ai.models.generateContent({
    model: "gemini-2.0-flash",
    contents: prompt,
  });

  return response.text;
}

  static async searchProductsByAI({message}) {
    const { features, max_price, min_price } = await GeminiChatbotService.extractKeywordsFromMessage(message);

    const { data: results } = await ProductService.searchProduct({
      keyword: Array.isArray(features) ? features.join(" ") : features,
      minPrice: min_price,
      maxPrice: max_price,
      limit: 5,
      select: ['name', 'image', 'price', 'sizes']
    })

    if (results.length === 0) {
      return { reply: "Xin l·ªói, kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p." };
    }

    const reply = await GeminiChatbotService.buildAdviceReply(results, message)

    return { 
      reply
    };

  }
}

module.exports = GeminiChatbotService;
